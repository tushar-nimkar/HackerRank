# Code shows the example for collections deque:
# A deque is a double-ended queue. It can be used to add or remove elements from both ends.
# Deques support thread safe, memory efficient appends and pops from either side of the deque with approximately the same  performance in either direction

# Example
# Code
# >>> from collections import deque
# >>> d = deque()
# >>> d.append(1)
# >>> print d
# deque([1])
# >>> d.appendleft(2)
# >>> print d
# deque([2, 1])
# >>> d.clear()
# >>> print d
# deque([])
# >>> d.extend('1')
# >>> print d
# deque(['1'])
# >>> d.extendleft('234')
# >>> print d
# deque(['4', '3', '2', '1'])
# >>> d.count('1')
# 1
# >>> d.pop()
# '1'
# >>> print d
# deque(['4', '3', '2'])
# >>> d.popleft()
# '4'
# >>> print d
# deque(['3', '2'])
# >>> d.extend('7896')
# >>> print d
# deque(['3', '2', '7', '8', '9', '6'])
# >>> d.remove('2')
# >>> print d
# deque(['3', '7', '8', '9', '6'])
# >>> d.reverse()
# >>> print d
# deque(['6', '9', '8', '7', '3'])
# >>> d.rotate(3)
# >>> print d
# deque(['8', '7', '3', '6', '9'])

# Enter your code here. Read input from STDIN. Print output to STDOUT
from collections import deque
number_of_entries=int(input())
d=deque()

    
for n in range(number_of_entries):
    in_dat = input().split()
    if in_dat[0] == "append":
        d.append(in_dat[1])
    elif in_dat[0] == "appendleft":
        d.appendleft(in_dat[1])
    elif in_dat[0] == "clear":
        d.clear()
    elif in_dat[0]=="extend":
        d.extend(in_dat[1])
    elif in_dat[0]=="extendleft":
        d.extendleft(in_dat[1])
    elif in_dat[0]=="count":
        d.count(in_dat[1])
    elif in_dat[0]=="pop":
        d.pop()
    elif in_dat[0]=="popleft":
        d.popleft()
    elif in_dat[0]=="remove":
        d.remove(in_dat[1])
    elif in_dat[0]=="reverse":
        d.reverse()
    elif in_dat =="rotate":
        d.rotate(in_dat[1])
    
print(" ".join(d))


# Input:
# 6
# append 1
# append 2
# append 3
# appendleft 4
# pop
# popleft

# Output:
# 1 2
